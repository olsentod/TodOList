/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _reminder_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reminder-list */ \"./src/reminder-list.js\");\n/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ \"./src/note.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ \"./src/settings.js\");\n\n\n\n\n// Main\ndocument.addEventListener('DOMContentLoaded', function() {\n  _settings__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance().onload();\n  _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().onload();\n  _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().onload();\n\n\n  // ---Settings Button\n  document.getElementById('btn-settings').addEventListener('click', () => {\n    _settings__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance().start();\n  });\n\n  // ---Add Button\n  document.getElementById('btn-add').addEventListener('click', function() {\n    _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().updateNote({\n      type: 'new',\n    });\n  });\n\n  // ---Show Button\n  document.getElementById('btn-show').addEventListener('click', function() {\n    document.getElementById('btn-show').classList.toggle('showDismissed');\n    document.getElementById('btn-dismiss').classList.toggle('active');\n    document.getElementById('btn-enable').classList.toggle('active');\n    document.getElementById('filterContainer').classList.toggle('showDismissed');\n    document.getElementById('reminderList').classList.toggle('showDismissed');\n  });\n\n  // ---Dismiss Button\n  document.getElementById('btn-dismiss').addEventListener('click', function() {\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().dismissReminders();\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().uncheckFilterCheckbox();\n  });\n\n  // ---Enable Button\n  document.getElementById('btn-enable').addEventListener('click', ()=> {\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().enableReminders();\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().uncheckFilterCheckbox();\n  });\n\n  // ---Delete Button\n  document.getElementById('btn-delete').addEventListener('click', function() {\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().deleteReminders();\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().uncheckFilterCheckbox();\n  });\n\n  // ---Filter Buttons\n  document.getElementById('filterOptions').addEventListener('click', function(e) {\n    // Show by Date/A-Z\n    const reminders = _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().reminders;\n    if (!document.getElementById('filterOptions').classList.contains('date')) {\n      // Sort by date\n      reminders.sort(_reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().sortByDate);\n      _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().showAll();\n      document.getElementById('filterOptions').classList.toggle('date');\n      return;\n    } else {\n      // Sort A-Z\n      reminders.sort(_reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().sortByTitle);\n      _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().showAll();\n      document.getElementById('filterOptions').classList.toggle('date');\n    }\n  });\n\n  // ---Checkboxes\n  document.getElementById('checkboxActive').addEventListener('click', function() {\n    const checkbox = document.getElementById('checkboxActive');\n    // Check all active reminders\n    if (!checkbox.classList.contains('active')) {\n      _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().checkAll('active');\n      document.getElementById('checkboxActive').classList.toggle('active');\n      return;\n    }\n    // Uncheck all active reminders\n    if (checkbox.classList.contains('active')) {\n      _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().uncheckAll('active');\n      document.getElementById('checkboxActive').classList.toggle('active');\n      return;\n    }\n  });\n\n  document.getElementById('checkboxDismiss').addEventListener('click', function() {\n    const checkbox = document.getElementById('checkboxDismiss');\n    // Check all dismissed reminders\n    if (!checkbox.classList.contains('active')) {\n      _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().checkAll('dismissed');\n      document.getElementById('checkboxDismiss').classList.toggle('active');\n      return;\n    }\n    // Uncheck all dismissed reminders\n    if (checkbox.classList.contains('active')) {\n      _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().uncheckAll('dismissed');\n      document.getElementById('checkboxDismiss').classList.toggle('active');\n      return;\n    }\n  });\n\n  // ---Mobile buttons\n  document.getElementById('backToList').addEventListener('click', function() {\n    _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().updateMobileView();\n  });\n});\n\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ }),

/***/ "./src/note.js":
/*!*********************!*\
  !*** ./src/note.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Note; });\n/* harmony import */ var _reminder_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reminder-list */ \"./src/reminder-list.js\");\n/* harmony import */ var _reminder_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reminder-date */ \"./src/reminder-date.js\");\n\n\n\n/**\n * Note Class (SINGLETON)\n */\nclass Note {\n  /**\n   * Creates a new note\n   */\n  constructor() {\n    this.elem = document.createElement('div');\n    this.alert = document.createElement('div');\n    this.maxChars = 100;\n    this.type = 'blank';\n  }\n\n  /**\n   * Returns instance of Note\n   * @return {Note} The instance\n   */\n  static getInstance() {\n    if (this.instance == null) this.instance = new Note();\n    return this.instance;\n  }\n\n\n  /**\n   * The onload handler\n   */\n  onload() {\n    document.getElementById('noteContainer').appendChild(this.elem);\n    this.alert.setAttribute('id', 'alert');\n    this.elem.parentElement.appendChild(this.alert);\n  }\n\n  /**\n   * Updates the Note instance\n   * @param {*} config The config options\n   */\n  updateNote(config) {\n    // Toggle the active class if has ID\n    if (config.id) {\n      const reminderList = _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n      for (const reminder of reminderList.reminders) {\n        const reminderId = reminder.id;\n        reminderList.fetchReminder(reminderId).elem.classList.remove('active');\n      }\n\n      reminderList.fetchReminder(config.id).elem.classList.add('active');\n    }\n\n    document.removeEventListener('keydown', this.updateCharactersLeft);\n\n    this.elem.classList.remove(this.type);\n    this.elem.classList.add(config.type);\n    this.type = config.type;\n\n    switch (this.type) {\n      case 'new':\n        this.newNote();\n        break;\n\n      case 'edit':\n        this.editNote(config.id);\n        break;\n\n      case 'display':\n        this.displayNote(config.id);\n        break;\n\n      case 'blank':\n        this.blankNote();\n        break;\n      default:\n        alert('Something went wrong');\n    }\n  }\n  /**\n   * Change Note to New Note View\n   */\n  newNote() {\n    this.updateMobileView();\n    this.elem.innerHTML = `\n        <div class=\"title-container\">\n        <textarea id=\"title\" type=\"text\" placeholder=\"Title\" maxlength=\"` + this.maxChars + `\"></textarea>\n        <div id=\"save\"><i class=\"fal fa-save\"></i></div>\n        <div id=\"charactersLeft\">` + this.maxChars + `</div>\n        </div>\n        <div id='date'><i class=\"fal fa-calendar-day\"></i></div>\n        <textarea id=\"content\" type=\"text\" placeholder=\"Content\"></textarea>`;\n\n    document.getElementById('save').addEventListener('click', () => {\n      // Validation\n      if (this.checkValidation()) {\n        _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().addReminder({\n          title: document.getElementById('title').value,\n          content: document.getElementById('content').value,\n          dueDate: this.reminderDate == null ? '' : this.reminderDate.getDate(),\n        });\n\n        this.reminderDate = null;\n      }\n    });\n\n    document.addEventListener('keydown', this.updateCharactersLeft);\n\n    document.getElementById('date').addEventListener('click', (e) => {\n      this.reminderDate = new _reminder_date__WEBPACK_IMPORTED_MODULE_1__[\"default\"](null);\n    });\n  }\n\n  /**\n   * Change Note to Edit Note View\n   * @param {Number} reminderId The reminder Id\n   */\n  editNote(reminderId) {\n    const reminderList = _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n    const reminderTitle = reminderList.fetchReminder(reminderId).title;\n    const reminderContent = reminderList.fetchReminder(reminderId).content;\n    const reminderDate = reminderList.fetchReminder(reminderId).dueDate;\n\n    this.currentChars = this.maxChars - reminderTitle.length;\n\n    this.elem.innerHTML = `\n        <div class=\"title-container\">\n        <textarea id=\"title\" type=\"text\" maxlength=\"` + this.maxChars + `\">` + reminderTitle + `</textarea>\n        <div id=\"save\"><i class=\"fal fa-save\"></i></div>\n        <div id=\"charactersLeft\">` + this.currentChars + `</div>\n        </div>\n        <div id='date'><i class=\"fal fa-calendar-day\"></i></div>\n        <textarea id=\"content\" type=\"text\">` + reminderContent + `</textarea>`;\n\n    if (reminderDate != '') {\n      this.reminderDate = new _reminder_date__WEBPACK_IMPORTED_MODULE_1__[\"default\"](reminderDate);\n    } else {\n      document.getElementById('date').addEventListener('click', (e) => {\n        this.reminderDate = new _reminder_date__WEBPACK_IMPORTED_MODULE_1__[\"default\"](null);\n      });\n    }\n\n    document.addEventListener('keydown', this.updateCharactersLeft);\n\n    document.getElementById('save').addEventListener('click', (e) => {\n      e.stopPropagation();\n      if (this.checkValidation()) {\n        const reminderDate = reminderList.fetchReminder(reminderId).dueDate;\n        _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().updateReminder({\n          id: reminderId,\n          title: document.getElementById('title').value,\n          content: document.getElementById('content').value,\n          dueDate: this.reminderDate == null ? reminderDate : this.reminderDate.getDate(),\n        });\n\n        this.reminderDate = null;\n      }\n    });\n  }\n  /**\n   * Change Note to Display Note View\n   * @param {Number} reminderId The reminder Id\n   */\n  displayNote(reminderId) {\n    // Change mobile view\n    this.updateMobileView();\n    const reminderList = _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n    const currentReminder = reminderList.fetchReminder(reminderId);\n    const reminderTitle = currentReminder.title;\n    const reminderContent = currentReminder.content;\n    const daysLeft = currentReminder.daysLeft();\n    const dateOptions = {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    };\n\n    this.elem.innerHTML = `\n        <div class=\"title-container\">\n        <textarea disabled id=\"title\" type=\"text\">` + reminderTitle + `</textarea>\n        <div id=\"edit\"><i class=\"fal fa-edit\"></i></div>\n        </div>\n        <div id='displayDate'>` + currentReminder.getDueDate(dateOptions) +`\n         &mdash; Days Left: ` + daysLeft + `</div>\n        <textarea disabled id=\"content\" type=\"text\">` + reminderContent + `</textarea>`;\n\n    document.getElementById('edit').addEventListener('click', () => {\n      // Edit Note\n      Note.getInstance().updateNote({\n        type: 'edit',\n        id: reminderId,\n      });\n    });\n  }\n  /**\n   * Change Note to Blank Note View\n   */\n  blankNote() {\n    this.elem.innerHTML = '';\n  }\n  /**\n   * Checks if the fields are valid fields\n   * @return {Boolean} True if valid; False if invalid\n   */\n  checkValidation() {\n    const title = document.getElementById('title');\n\n    if (title.value == '') {\n      this.alert.innerHTML = 'Add title';\n      this.alert.classList.add('warning');\n      title.parentElement.classList.add('warning');\n\n      this.checkClick();\n\n      return false;\n    }\n\n    return true;\n  }\n  /**\n * Checks for a click\n */\n  checkClick() {\n    const documentClick = (e)=> {\n      e.stopPropagation();\n      if (e.target == document.getElementById('save') || e.target.closest('#save') != null) return;\n      if (e.target == document.getElementById('edit') || e.target.closest('#save') != null) return;\n      this.alert.classList.remove('warning');\n      document.removeEventListener('click', documentClick);\n    };\n    if (this.alert.classList.contains('warning')) {\n      setTimeout(()=> {\n        document.addEventListener('click', documentClick);\n      }, 200);\n    }\n  }\n  /**\n   * Mobile show flip views\n   */\n  updateMobileView() {\n    document.getElementById('reminderListContainer').classList.toggle('focused');\n    document.getElementById('backToList').classList.toggle('active');\n    document.getElementById('noteContainer').classList.toggle('focused');\n  }\n  /**\n * Check the characters left in the text box and update view\n */\n  updateCharactersLeft() {\n    const titleChars = document.getElementById('title').value.length;\n    const charactersLeftElem = document.getElementById('charactersLeft');\n    const charsLeft = Note.getInstance().maxChars - titleChars;\n\n    charactersLeftElem.innerHTML = charsLeft;\n  }\n}\n\n\n//# sourceURL=webpack:///./src/note.js?");

/***/ }),

/***/ "./src/reminder-date.js":
/*!******************************!*\
  !*** ./src/reminder-date.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ReminderDate; });\n/**\n * The ReminderDate Class\n */\nclass ReminderDate {\n  /**\n     * Creates a ReminderDate object\n     * @param {Date} date A Date object\n     */\n  constructor(date) {\n    date == null || date == '' ? this.date = new Date() : this.date = new Date(date);\n\n    this.init();\n  }\n\n  /**\n * Get instance of ReminderDate Class\n * @return {ReminderDate} The instance of ReminderDate\n */\n  static getInstance() {\n    if (this.instance == null) this.instance = new ReminderDate();\n    return this.instance;\n  }\n\n  /**\n   * Adds ReminderDate to DOM\n   */\n  init() {\n    this.elem = document.getElementById('date');\n    this.elem.outerHTML = `\n    <div id=\"date\" class=\"active\">\n    <input type=\"date\" id=\"dateElem\">\n    </div>`;\n\n    const dateElem = document.getElementById('dateElem');\n    dateElem.setAttribute('value', this.date.toISOString().slice(0, 10));\n    dateElem.setAttribute('min', new Date().toISOString().slice(0, 10));\n    const maxYear = this.date.getFullYear() + 1;\n    const maxDate = new Date(this.date.setFullYear(maxYear));\n    dateElem.setAttribute('max', maxDate.toISOString().slice(0, 10));\n  }\n  /**\n * Get the current date from the Input\n * @return {Date} The the current date\n */\n  getDate() {\n    let newDate = new Date(document.getElementById('dateElem').value);\n    newDate = new Date(newDate.setDate(newDate.getUTCDate()));\n    newDate.setHours(0, 0, 0, 0);\n    this.date = newDate;\n\n    return this.date;\n  }\n}\n\n\n//# sourceURL=webpack:///./src/reminder-date.js?");

/***/ }),

/***/ "./src/reminder-list.js":
/*!******************************!*\
  !*** ./src/reminder-list.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ReminderList; });\n/* harmony import */ var _reminder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reminder */ \"./src/reminder.js\");\n/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ \"./src/note.js\");\n\n\n\n/**\n * ReminderList Class (SINGLETON)\n */\nclass ReminderList {\n  /**\n     * Creates a new ReminderList\n     */\n  constructor() {\n    this.reminders = [];\n  }\n  /**\n * Get instance of ReminderList Class\n * @return {ReminderList} The instance of ReminderList\n */\n  static getInstance() {\n    if (this.instance == null) this.instance = new ReminderList();\n    return this.instance;\n  }\n\n  /**\n   * Onload for ReminderList\n   */\n  onload() {\n    this.pullFromStorage();\n    this.showAll();\n  }\n\n  /**\n   * Add a reminder to ReminderList\n   * @param {Reminder} reminder Reminder to add\n   */\n  addReminder(reminder) {\n    const newReminder = new _reminder__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n      id: new Date() * 13,\n      title: reminder.title,\n      content: reminder.content,\n      dueDate: reminder.dueDate,\n\n    });\n    this.reminders.push(newReminder);\n    this.reminders.sort(this.sortByDate);\n    this.showAll();\n    this.saveToStorage();\n\n    // Change mobile view\n    _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().updateMobileView();\n    _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().updateNote({\n      type: 'blank',\n    });\n  }\n\n  /**\n   * Dismiss selected Reminders\n   */\n  dismissReminders() {\n    for (const reminder in this.reminders) {\n      if (this.reminders[reminder].selected) {\n        console.log(this.reminders[reminder]);\n        this.reminders[reminder].dismiss();\n      }\n    }\n\n    this.saveToStorage();\n    this.showAll();\n  }\n  /**\n * Enable selected Reminders\n */\n  enableReminders() {\n    for (const reminder in this.reminders) {\n      if (this.reminders[reminder].selected) {\n        this.reminders[reminder].enable();\n      }\n    }\n\n    this.saveToStorage();\n    this.showAll();\n  }\n\n  /**\n   * Delete selected Reminders\n   */\n  deleteReminders() {\n    for (let reminder = this.reminders.length-1; reminder >= 0; reminder--) {\n      if (this.reminders[reminder].selected) {\n        this.reminders[reminder].delete();\n        this.reminders.splice(reminder, 1);\n      }\n    }\n\n    this.saveToStorage();\n    this.showAll();\n\n    _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().updateNote({\n      type: 'blank',\n    });\n  }\n\n  /**\n   * Update Reminder\n   * @param {Reminder} reminder Reminder Object\n   */\n  updateReminder(reminder) {\n    this.fetchReminder(reminder.id).save(reminder);\n\n    this.saveToStorage();\n\n    this.showAll();\n\n    _note__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().updateNote({\n      type: 'display',\n      id: reminder.id,\n    });\n  }\n\n  /**\n   * Get Reminder by Id\n   * @param {Number} id Reminder Id\n   * @return {Reminder} Reminder Object\n   */\n  fetchReminder(id) {\n    for (const reminder in this.reminders) {\n      if (id == this.reminders[reminder].id) return this.reminders[reminder];\n    }\n  }\n\n  /**\n   * Save ReminderList to local storage\n   */\n  saveToStorage() {\n    localStorage.setItem('Reminders', JSON.stringify(this.reminders));\n  }\n\n  /**\n   * Loads from local storage and generates view.\n   */\n  pullFromStorage() {\n    if (localStorage.getItem('Reminders')) {\n      const tempReminders = JSON.parse(localStorage.getItem('Reminders'));\n      for (let temp of tempReminders) {\n        temp = new _reminder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](temp);\n        this.reminders.push(temp);\n      }\n    }\n  }\n\n  /**\n * Show all Reminders in\n */\n  showAll() {\n    document.getElementById('reminderList').innerHTML = '';\n    for (const reminder of this.reminders) {\n      reminder.init();\n    }\n  }\n\n  /**\n * Update all the reminders and shows them\n */\n  updateAllSettings() {\n    for (const reminder of this.reminders) {\n      reminder.updateSettings();\n    }\n    this.saveToStorage();\n  }\n  /**\n * Check all Reminders\n * @param {String} type The type of reminder\n */\n  checkAll(type) {\n    if (type == 'active') {\n      for (const reminder of this.reminders) {\n        if (!reminder.dismissed && !reminder.selected) reminder.check();\n      }\n    } else if (type == 'dismissed') {\n      for (const reminder of this.reminders) {\n        if (reminder.dismissed && !reminder.selected) reminder.check();\n      }\n    } else {\n      return;\n    }\n  }\n\n  /**\n * Un-Check all Reminders\n * @param {String} type The type of reminder\n */\n  uncheckAll(type) {\n    if (type == 'active') {\n      for (const reminder of this.reminders) {\n        if (!reminder.dismissed && reminder.selected) reminder.check();\n      }\n    } else if (type == 'dismissed') {\n      for (const reminder of this.reminders) {\n        if (reminder.dismissed && reminder.selected) reminder.check();\n      }\n    } else {\n      return;\n    }\n  }\n  /**\n * Unchecks the Active or Dismiss checkbox\n */\n  uncheckFilterCheckbox() {\n    const checkboxActive = document.getElementById('checkboxActive');\n    if (checkboxActive.classList.contains('active')) checkboxActive.classList.toggle('active');\n\n    const checkboxDismiss = document.getElementById('checkboxDismiss');\n    if (checkboxDismiss.classList.contains('active')) checkboxDismiss.classList.toggle('active');\n  }\n  /**\n * Sorts the reminderlist by due dates\n * @param {Reminder} a The first Reminder\n * @param {Reminder} b The second Reminder\n * @return {Boolean} Direction of the sort\n */\n  sortByDate(a, b) {\n    if (!a.dueDate && !b.dueDate) return 0;\n    if (!a.dueDate) return 1;\n    if (!b.dueDate) return -1;\n    if (a.dueDate > b.dueDate) return 1;\n    if (a.dueDate < b.dueDate) return -1;\n    return 0;\n  }\n\n  /**\n * Sorts the reminderlist by titles\n * @param {Reminder} a The first Reminder\n * @param {Reminder} b The second Reminder\n * @return {Boolean} Direction of the sort\n */\n  sortByTitle(a, b) {\n    if (a.title > b.title) return 1;\n    if (a.title < b.title) return -1;\n    return 0;\n  }\n}\n\n\n//# sourceURL=webpack:///./src/reminder-list.js?");

/***/ }),

/***/ "./src/reminder.js":
/*!*************************!*\
  !*** ./src/reminder.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Reminder; });\n/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note */ \"./src/note.js\");\n/* harmony import */ var _reminder_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reminder-list */ \"./src/reminder-list.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ \"./src/settings.js\");\n\n\n\n\n/**\n * The Reminder Class\n */\nclass Reminder {\n  /**\n     * Constructor for Reminder Class\n     * @param {*} config Config Options\n     */\n  constructor(config) {\n    this.id = config.id;\n    this.title = config.title;\n    this.content = config.content;\n    config.selected ? this.selected = config.selected : this.selected = false;\n    config.dateCreated ? this.dateCreated = new Date(config.dateCreated) : this.dateCreated = new Date();\n    config.lastUpdated ? this.lastUpdated = new Date(config.lastUpdated) : this.lastUpdated = new Date();\n    config.dueDate ? this.dueDate = new Date(config.dueDate) : this.dueDate = '';\n    config.dismissed ? this.dismissed = config.dismissed : this.dismissed = false;\n\n    this.settings = _settings__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance().settings;\n\n    this.init();\n  }\n\n  /**\n * Init to Win It\n */\n  init() {\n    this.elem = document.createElement('div');\n    this.elem.classList.add('reminder');\n    if (this.dismissed) this.elem.classList.add('dismissed');\n\n    // Checks if the Due date is soon or not\n    const daysLeft = this.daysLeft();\n    let timeFrame;\n    if (daysLeft == '&#8734;') {\n      timeFrame = 'safe';\n    } else if (daysLeft > this.settings.alerts.safeDays) {\n      timeFrame = 'safe';\n    } else if (daysLeft > this.settings.alerts.warningDays && daysLeft <= this.settings.alerts.safeDays) {\n      timeFrame = 'caution';\n    } else {\n      timeFrame = 'warning';\n    }\n\n    this.elem.innerHTML = `\n    <div class=\"desc\">\n        <h3>` + this.title + `</h3>\n        <p class=\"` + timeFrame + `\">` + this.getDueDate() + `</p></div>\n    <div class=\"checkbox\">\n        <span><i class=\"fal fa-check\"></i></span>\n    </div>`;\n\n    // Click for display note\n    document.getElementById('reminderList').appendChild(this.elem);\n    this.elem.querySelector('.desc').addEventListener('click', ()=> {\n      _note__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().updateNote({\n        type: 'display',\n        id: this.id,\n      });\n    });\n\n    // Check box stuff\n    if (this.selected === true) {\n      this.elem.querySelector('.checkbox').classList.toggle('active');\n    }\n\n    this.elem.querySelector('.checkbox').addEventListener('click', () => {\n      this.check();\n    });\n  }\n  /**\n * Dismiss Reminder\n */\n  dismiss() {\n    this.selected = false;\n    this.dismissed = true;\n  }\n\n  /**\n   * Enable Reminder\n   */\n  enable() {\n    this.selected = false;\n    this.dismissed = false;\n  }\n  /**\n * Delete Reminder\n */\n  delete() {\n    this.selected = false;\n  }\n\n  /**\n   * Save Reminder\n   * @param {Reminder} reminder Reminder Object\n   */\n  save(reminder) {\n    this.title = reminder.title;\n    this.content = reminder.content;\n    this.dismissed = reminder.dismissed;\n    reminder.dueDate == '' ? this.dueDate = '' : this.dueDate = new Date(reminder.dueDate);\n    this.lastUpdated = new Date();\n  }\n\n  /**\n   * Changes the current settings of the reminder\n   */\n  updateSettings() {\n    this.settings = _settings__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance().settings;\n  }\n\n  /**\n * Check Reminder\n */\n  check() {\n    this.selected == true ? this.selected = false : this.selected = true;\n    this.elem.querySelector('.checkbox').classList.toggle('active');\n    _reminder_list__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().saveToStorage();\n  }\n\n  /**\n * Returns the due date in a nice string\n * @param {Object} options Options for Local Date String\n * @return {String} The date in string version\n */\n  getDueDate(options) {\n    if (this.dueDate != '') {\n      if (arguments.length == 1) {\n        return this.dueDate.toLocaleDateString('en-US', options);\n      } else {\n        return this.dueDate.toLocaleDateString();\n      }\n    } else {\n      return '';\n    }\n  }\n\n  /**\n * Gets the number of days left to finish the reminder\n * @return {Number} Days left to finish item\n */\n  daysLeft() {\n    if (this.dueDate != '') {\n      const dueTime = this.dueDate.getTime();\n      const currentTime = new Date().getTime();\n\n      let daysLeft = dueTime - currentTime;\n      daysLeft = Math.ceil(daysLeft / (1000*60*60*24));\n\n      return daysLeft;\n    }\n\n    return '&#8734;';\n  }\n}\n\n\n//# sourceURL=webpack:///./src/reminder.js?");

/***/ }),

/***/ "./src/settings.js":
/*!*************************!*\
  !*** ./src/settings.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Settings; });\n/* harmony import */ var _reminder_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reminder-list */ \"./src/reminder-list.js\");\n\n\n/**\n * Settings Class (SINGLETON)\n */\nclass Settings {\n  /**\n     * Creates a new Settings\n     */\n  constructor() {\n    this.elem = document.createElement('div');\n    // Default colors\n\n    this.settings = {\n      colors: {\n        safe: 'blue',\n        caution: 'yellow',\n        warning: 'red',\n      },\n      alerts: {\n        safeDays: 30,\n        warningDays: 5,\n      },\n    };\n\n    // If in local storage update new values\n    if (localStorage.getItem('Settings')) {\n      this.pullFromStorage();\n    }\n\n    // Build from current settings\n    this.savetoStorage();\n    this.init();\n  }\n\n  /**\n     * Get instance of Settings Class\n     * @return {Settings} The instance of Settings\n     */\n  static getInstance() {\n    if (this.instance == null) this.instance = new Settings();\n    return this.instance;\n  }\n\n  /**\n * Init to Win it!\n */\n  init() {\n\n  }\n\n  /**\n * Onload settings\n */\n  onload() {\n    this.pullFromStorage();\n  }\n\n  /**\n * Update the current settings\n */\n  update() {\n\n  }\n\n  /**\n   * Build the settings area and populate with content\n   */\n  start() {\n    this.elem.innerHTML = `\n    <div id=\"settings\">\n    <div class=\"colors\">\n    <h3>Colors</h3>\n    </div>\n    <div class=\"alerts\">\n    <h3>Alerts</h3>\n    <label for=\"safeDays\">Days before caution</label>\n    <input type=\"number\" id=\"safeDays\" placeholder=\"` + this.settings.alerts.safeDays + `\">\n    <label for=\"warningDays\">Days before warning</label>\n    <input type=\"number\" id=\"warningDays\" placeholder=\"` + this.settings.alerts.warningDays + `\">\n    </div>\n    <div id=\"cancelSettings\"><i class=\"fal fa-times\"></i></div>\n    <div id=\"saveSettings\">Save</div>\n    </div>`;\n    document.body.appendChild(this.elem);\n    this.elem.id = 'settingsContainer';\n\n    document.getElementById('saveSettings').addEventListener('click', () => {\n      // Update element\n      // this.settings.alerts.safeDays = document.getElementById('safeDays').value;\n\n      const safeDays = document.getElementById('safeDays');\n      const warningDays = document.getElementById('warningDays');\n\n      this.settings = {\n        alerts: {\n          safeDays: safeDays.value ? safeDays.value : this.settings.alerts.safeDays,\n          warningDays: warningDays.value ? warningDays.value : this.settings.alerts.warningDays,\n        },\n        colors: {\n\n        },\n\n      };\n      // Finalize\n      this.savetoStorage();\n      this.exit();\n    });\n\n    document.getElementById('cancelSettings').addEventListener('click', () => {\n      this.exit();\n    });\n  }\n\n  /**\n   * Exit the settings view and go back to main view\n   */\n  exit() {\n    this.elem.remove();\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().updateAllSettings();\n    _reminder_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance().showAll();\n  }\n\n  /**\n * Save the settings into local storage\n */\n  savetoStorage() {\n    localStorage.setItem('Settings', JSON.stringify(this.settings));\n  }\n\n  /**\n   * Pull settings from local storage\n   */\n  pullFromStorage() {\n    if (localStorage.getItem('Settings')) {\n      const tempSettings = JSON.parse(localStorage.getItem('Settings'));\n      this.settings = tempSettings;\n    }\n  }\n\n  /**\n   * Check Validity.\n   * 1. Warning days must be less than or equal to safe days.\n   * 2.\n   */\n}\n\n\n//# sourceURL=webpack:///./src/settings.js?");

/***/ })

/******/ });